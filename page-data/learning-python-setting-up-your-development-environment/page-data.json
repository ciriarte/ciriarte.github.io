{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/learning-python-setting-up-your-development-environment","result":{"data":{"post":{"__typename":"MdxPost","slug":"/learning-python-setting-up-your-development-environment","title":"Learning Python | Setting up your development environment","date":"28.03.2020","tags":[{"name":"python","slug":"python"},{"name":"learning","slug":"learning"}],"description":"Before you start. Boostraping your dev environment.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning Python | Setting up your development environment\",\n  \"date\": \"2020-03-28T00:00:00.000Z\",\n  \"description\": \"Before you start. Boostraping your dev environment.\",\n  \"tags\": [\"python\", \"learning\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Prerequisites\"), mdx(\"p\", null, \"This guide assumes you have a \\\"recent enough\\\" (3.7+) version of python installed on your machine, it\\nalso assumes you're using MacOS. We can add other configurations upon request.\"), mdx(\"h3\", null, \"Why do we need all these details?\"), mdx(\"p\", null, \"I want to address one of the most time consuming tasks when starting any new project: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bootstraping\"), \".\"), mdx(\"p\", null, \"Bootstrapping means getting your project up and running, with all the tools you need to focus on your\\nprogramming assignment. And let's start by addressing the elephant in the room, what's the number one\\ntool you'll be using with your code? Your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"text editor\"), \".\"), mdx(\"p\", null, \"All major programming languages are primarily text based. There's exceptions but they are not in wide\\nuse so we'll ignore them for now.\"), mdx(\"p\", null, \"At the moment of this writing, my recommendation is to use visual studio code, of vscode for short.\\nThis editor is both simple to use and powerfull, and you can use it for other languages you're might\\nlook into learning next, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"javascript\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"html\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \".\"), mdx(\"h3\", null, \"Setting up \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"brew\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"MacOS\")), mdx(\"p\", null, \"Most operating systems come with package managers. Package managers' main function is to install\\nsoftware in your machine in a consistent way. The defacto standard in MacOS is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://brew.sh/\"\n  }), \"homebrew\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"/bin/bash -c \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\\\"\\n\")), mdx(\"h3\", null, \"Setting up \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"vscode\"), \" using homebrew. Add the vscode using homebrew to which directory in terminal? Doesn't the directory matter? Do you have to add vscode/python 3.8 to all directories? Would love some info around this piece!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"brew install visual-studio-code\\n\")), mdx(\"p\", null, \"[1]\", \" There's other programming languages, like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.dangermouse.net/esoteric/piet.html\"\n  }), \"piet\"), \"\\nor \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.google.com/blockly/\"\n  }), \"scratch/blockly\"), \" that use visual constructs instead/in\\naddition to text editors.\"), mdx(\"h3\", null, \"Let's make sure we're using the right version of python\"), mdx(\"p\", null, \"MacOS Catalina comes with python by default, but the version is a bit old , and some exercises use\\nnewer features. It will also get removed it future versions of MacOS. So it's a good idea to install\\nour desired version.\"), mdx(\"p\", null, \"Let's install python 3.8 (the latest as of March 28th, 2020):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ pipenv --python 3.8\\n\")), mdx(\"p\", null, \"Let's activate that version so we can start coding. We will need to do this step every time we come\\nback to this folder.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ pipenv shell\\n\")), mdx(\"p\", null, \"Let's check which version of python we have now:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ python --version\\n\")), mdx(\"p\", null, \"You should see something like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"Python 3.8.0\\n\")), mdx(\"h3\", null, \"Go to your first progam code.\"), mdx(\"p\", null, \"You can now type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"code .\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Prerequisites This guide assumes you have a \"recent enough\" (3.7+) version of python installed on your machine, it\nalso assumes you're usingâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/learning-python-setting-up-your-development-environment","formatString":"DD.MM.YYYY"}}}