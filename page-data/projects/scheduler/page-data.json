{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/projects/scheduler","result":{"data":{"page":{"__typename":"MdxPage","title":"","slug":"/projects/scheduler","excerpt":"This page shows a small proof of concept using an  SAT solver . From wikipedia: In logic and computer science, the Boolean satisfiabilityâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/projects/scheduler\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This page shows a small proof of concept using an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Boolean_satisfiability_problem\"\n  }), \"SAT solver\"), \".\"), mdx(\"p\", null, \"From wikipedia:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In logic and computer science, the Boolean satisfiability problem (sometimes called propositional\\nsatisfiability problem and abbreviated SATISFIABILITY or SAT) is the problem of determining if there exists\\nan interpretation that satisfies a given Boolean formula. In other words, it asks whether the variables of\\na given Boolean formula can be consistently replaced by the values TRUE or FALSE in such a way that the formula\\nevaluates to TRUE. If this is the case, the formula is called satisfiable. On the other hand, if no such\\nassignment exists, the function expressed by the formula is FALSE for all possible variable assignments and\\nthe formula is unsatisfiable. For example, the formula \\\"a AND NOT b\\\" is satisfiable because one can find\\nthe values a = TRUE and b = FALSE, which make (a AND NOT b) = TRUE. In contrast, \\\"a AND NOT a\\\" is unsatisfiable.\")), mdx(\"p\", null, \"After researching this topic to see if there's a way we can use this powerful tool to help during the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"COVID-19\"), \"\\npandemic by alleviating the burden of scheduling a team of nurses.\"), mdx(\"p\", null, \"I've setup an artificial test case below, and a calendar with a possible solution. This calendar shows the shifts\\nthat were requested in blue, and the shifts that were not requested in orange:\"), mdx(LoadableCalendar, {\n    mdxType: \"LoadableCalendar\"\n  }), mdx(\"br\", null), mdx(\"h5\", null, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Patrick Doherty and Jonas Kvarnstr\\xF6m, \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Handbook of Knowledge Representation\"), \", 2008.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developers.google.com/optimization/scheduling/employee_scheduling\"\n  }), \"ORTools by Google\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/projects/scheduler"}}}