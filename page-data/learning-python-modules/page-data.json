{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/learning-python-modules","result":{"data":{"post":{"__typename":"MdxPost","slug":"/learning-python-modules","title":"Learning Python | Modules","date":"23.04.2020","tags":[{"name":"python","slug":"python"},{"name":"learning","slug":"learning"}],"description":"Python modules and how to tame them","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Learning Python | Modules\",\n  \"date\": \"2020-04-23T00:00:00.000Z\",\n  \"description\": \"Python modules and how to tame them\",\n  \"tags\": [\"python\", \"learning\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When we build programs sometimes they get big. The same way\\nwe split little pieces of logic with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/learning-python-methods-vs-functions-vs-classes\"\n  }), \"Methods, Functions and Classes\"), \"\\nwe might want to start segregating our code in multiple files, for\\nmany reasons, the most common one is to reuse a piece\\nof code that we already wrote. Let's see how all that works.\"), mdx(\"p\", null, \"When we writing the first few programs in earlier posts, we created\\na file named like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" and then keep appending more code at the end\\nof the file.\"), mdx(\"p\", null, \"Let's try to use our file in another program!\"), mdx(\"p\", null, \"Create a new file by opening a terminal and type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ touch main.py\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: Whenever you see $ at the beginning of commands it\\nmeans it should be typed in your terminal.\")), mdx(\"p\", null, \"Now let's add the following content to our file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import cat\\n\")), mdx(\"p\", null, \"Now let's run our new script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ python main.py\\n\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Meoooooooow\\n\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Meow\\n\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Meoooow\\n\\n\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Meooooow\\n\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Meoow\\n\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Meoooooooooow\\n\\na == b Not the same Cat!\\n\\na == a Same Cat\\n\\nb == b Same Cat\\n\\na == b It's not the same cat!\\n\\na == a It's the same cat!\\n\")), mdx(\"p\", null, \"What we're seeing is the output of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \". Why is that? When we use other imports\\nwe usually don't get this kind of output!\"), mdx(\"p\", null, \"When Python reads our file it starts \\\"interpreting\\\" our statements from top to bottom,\\nline by line. Therefore adding the following line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import module_name\\n\")), mdx(\"p\", null, \"Acts as a copying and pasting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.py\"), \" at the top of the file.\"), mdx(\"p\", null, \"Rad. Except when it's not. Most of the time, what we want to do when reusing\\ncode this way is to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"import the definitions\"), \". In our example above we want to\\nget just the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cat\"), \" definition, but we don't want to execute all those meows.\"), mdx(\"p\", null, \"To do that, we need to go back to the original \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" and make a few adjustments:\"), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"1:32\",\n    \"1:32\": true\n  }), \"class Cat:\\n  def __init__(self,\\n    oos_when_hungry,\\n    oos_when_playful,\\n    oos_when_open_door):\\n    self.oos_when_hungry = oos_when_hungry\\n    self.oos_when_playful = oos_when_playful\\n    self.oos_when_open_door = oos_when_open_door\\n\\n  @staticmethod\\n  def meow(number_of_os):\\n    print(\\\"\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Me\\\" + \\\"o\\\" * number_of_os + \\\"w\\\")\\n\\n  def open_the_door(self):\\n    Cat.meow(self.oos_when_open_door)\\n\\n  def hungry(self):\\n    Cat.meow(self.oos_when_hungry)\\n\\n  def i_wanna_play(self):\\n    Cat.meow(self.oos_when_playful)\\n\\n  def equals(self, other_cat):\\n    if self.oos_when_hungry == other_cat.oos_when_hungry and \\\\\\n      self.oos_when_playful == other_cat.oos_when_playful and \\\\\\n      self.oos_when_open_door == other_cat.oos_when_open_door:\\n      return True\\n    else:\\n      return False\\n\\n  def __equals__(self, other_cat):\\n    return self.equals(other_cat)\\n\\n\\n# Let me tell you about my girly kitty's morning\\na = Cat(1, 4, 8)\\na.open_the_door()\\na.hungry()\\na.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n# Let me tell you about my big macho kitty\\nb = Cat(2, 10, 5)\\nb.open_the_door()\\nb.hungry()\\nb.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(b):\\n  print(\\\"a == b Same Cat\\\")\\nelse:\\n  print(\\\"a == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(a):\\n  print(\\\"a == a Same Cat\\\")\\nelse:\\n  print(\\\"a == a Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif b.equals(b):\\n  print(\\\"b == b Same Cat\\\")\\nelse:\\n  print(\\\"b == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == b:\\n  print(\\\"a == b It's the same cat!\\\")\\nelse:\\n  print(\\\"a == b It's not the same cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == a:\\n  print(\\\"a == a It's the same cat!\\\")\\nelse:\\n  print(\\\"a == a It's not the same cat!\\\")\\n\")), mdx(\"p\", null, \"First, let's review what we mean by \\\"definitions\\\":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1,2,11,14,17,20,23,31\",\n    \"1,2,11,14,17,20,23,31\": true\n  }), \"\")), mdx(\"p\", null, \"A definition is every time we describe the behavior of a class, a method or a function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"34:40\",\n    \"34:40\": true\n  }), \"\")), mdx(\"p\", null, \"Later on, we use these \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"definitions\"), \" when we instantiate/create objects of the class or when we invoke\\nthose methods and functions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"1:50\",\n    \"1:50\": true\n  }), \"import cat\\n\\n# Let me tell you about my girly kitty's morning\\na = Cat(1, 4, 8)\\na.open_the_door()\\na.hungry()\\na.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n# Let me tell you about my big macho kitty\\nb = Cat(2, 10, 5)\\nb.open_the_door()\\nb.hungry()\\nb.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(b):\\n  print(\\\"a == b Same Cat\\\")\\nelse:\\n  print(\\\"a == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(a):\\n  print(\\\"a == a Same Cat\\\")\\nelse:\\n  print(\\\"a == a Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif b.equals(b):\\n  print(\\\"b == b Same Cat\\\")\\nelse:\\n  print(\\\"b == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == b:\\n  print(\\\"a == b It's the same cat!\\\")\\nelse:\\n  print(\\\"a == b It's not the same cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == a:\\n  print(\\\"a == a It's the same cat!\\\")\\nelse:\\n  print(\\\"a == a It's not the same cat!\\\")\\n\")), mdx(\"p\", null, \"We can reuse those definitions by \\\"importing\\\" them in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.py\"), \" from our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" module.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"1:50\",\n    \"1:50\": true\n  }), \"import cat\\n\\n# Let me tell you about my girly kitty's morning\\na = Cat(1, 4, 8)\\na.open_the_door()\\na.hungry()\\na.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n# Let me tell you about my big macho kitty\\nb = Cat(2, 10, 5)\\nb.open_the_door()\\nb.hungry()\\nb.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(b):\\n  print(\\\"a == b Same Cat\\\")\\nelse:\\n  print(\\\"a == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(a):\\n  print(\\\"a == a Same Cat\\\")\\nelse:\\n  print(\\\"a == a Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif b.equals(b):\\n  print(\\\"b == b Same Cat\\\")\\nelse:\\n  print(\\\"b == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == b:\\n  print(\\\"a == b It's the same cat!\\\")\\nelse:\\n  print(\\\"a == b It's not the same cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == a:\\n  print(\\\"a == a It's the same cat!\\\")\\nelse:\\n  print(\\\"a == a It's not the same cat!\\\")\\n\")), mdx(\"p\", null, \"But what about those extra meows we got when we imported the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat\"), \" module the first time?\\nLet's go back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" for a moment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"34:70\",\n    \"34:70\": true\n  }), \"class Cat:\\n  def __init__(self,\\n    oos_when_hungry,\\n    oos_when_playful,\\n    oos_when_open_door):\\n    self.oos_when_hungry = oos_when_hungry\\n    self.oos_when_playful = oos_when_playful\\n    self.oos_when_open_door = oos_when_open_door\\n\\n  @staticmethod\\n  def meow(number_of_os):\\n    print(\\\"\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Me\\\" + \\\"o\\\" * number_of_os + \\\"w\\\")\\n\\n  def open_the_door(self):\\n    Cat.meow(self.oos_when_open_door)\\n\\n  def hungry(self):\\n    Cat.meow(self.oos_when_hungry)\\n\\n  def i_wanna_play(self):\\n    Cat.meow(self.oos_when_playful)\\n\\n  def equals(self, other_cat):\\n    if self.oos_when_hungry == other_cat.oos_when_hungry and \\\\\\n      self.oos_when_playful == other_cat.oos_when_playful and \\\\\\n      self.oos_when_open_door == other_cat.oos_when_open_door:\\n      return True\\n    else:\\n      return False\\n\\n  def __equals__(self, other_cat):\\n    return self.equals(other_cat)\\n\\n\\n# Let me tell you about my girly kitty's morning\\na = Cat(1, 4, 8)\\na.open_the_door()\\na.hungry()\\na.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n# Let me tell you about my big macho kitty\\nb = Cat(2, 10, 5)\\nb.open_the_door()\\nb.hungry()\\nb.i_wanna_play()\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(b):\\n  print(\\\"a == b Same Cat\\\")\\nelse:\\n  print(\\\"a == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a.equals(a):\\n  print(\\\"a == a Same Cat\\\")\\nelse:\\n  print(\\\"a == a Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif b.equals(b):\\n  print(\\\"b == b Same Cat\\\")\\nelse:\\n  print(\\\"b == b Not the same Cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == b:\\n  print(\\\"a == b It's the same cat!\\\")\\nelse:\\n  print(\\\"a == b It's not the same cat!\\\")\\n\\nprint()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\nif a == a:\\n  print(\\\"a == a It's the same cat!\\\")\\nelse:\\n  print(\\\"a == a It's not the same cat!\\\")\\n\")), mdx(\"p\", null, \"You can prevent executing those statements by checking if the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" was invoked as\\na module or as a script by checking its name.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"34:70\",\n    \"34:70\": true\n  }), \"class Cat:\\n  def __init__(self,\\n    oos_when_hungry,\\n    oos_when_playful,\\n    oos_when_open_door):\\n    self.oos_when_hungry = oos_when_hungry\\n    self.oos_when_playful = oos_when_playful\\n    self.oos_when_open_door = oos_when_open_door\\n\\n  @staticmethod\\n  def meow(number_of_os):\\n    print(\\\"\\u0E05^\\u2022\\uFECC\\u2022^\\u0E05 Me\\\" + \\\"o\\\" * number_of_os + \\\"w\\\")\\n\\n  def open_the_door(self):\\n    Cat.meow(self.oos_when_open_door)\\n\\n  def hungry(self):\\n    Cat.meow(self.oos_when_hungry)\\n\\n  def i_wanna_play(self):\\n    Cat.meow(self.oos_when_playful)\\n\\n  def equals(self, other_cat):\\n    if self.oos_when_hungry == other_cat.oos_when_hungry and \\\\\\n      self.oos_when_playful == other_cat.oos_when_playful and \\\\\\n      self.oos_when_open_door == other_cat.oos_when_open_door:\\n      return True\\n    else:\\n      return False\\n\\n  def __equals__(self, other_cat):\\n    return self.equals(other_cat)\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    # Let me tell you about my girly kitty's morning\\n    a = Cat(1, 4, 8)\\n    a.open_the_door()\\n    a.hungry()\\n    a.i_wanna_play()\\n\\n    print()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n    # Let me tell you about my big macho kitty\\n    b = Cat(2, 10, 5)\\n    b.open_the_door()\\n    b.hungry()\\n    b.i_wanna_play()\\n\\n    print()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n    if a.equals(b):\\n      print(\\\"a == b Same Cat\\\")\\n    else:\\n      print(\\\"a == b Not the same Cat!\\\")\\n\\n    print()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n    if a.equals(a):\\n      print(\\\"a == a Same Cat\\\")\\n    else:\\n      print(\\\"a == a Not the same Cat!\\\")\\n\\n    print()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n    if b.equals(b):\\n      print(\\\"b == b Same Cat\\\")\\n    else:\\n      print(\\\"b == b Not the same Cat!\\\")\\n\\n    print()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n    if a == b:\\n      print(\\\"a == b It's the same cat!\\\")\\n    else:\\n      print(\\\"a == b It's not the same cat!\\\")\\n\\n    print()  # Let's add some space for readability. This line has nothing to do with the cats.\\n\\n    if a == a:\\n      print(\\\"a == a It's the same cat!\\\")\\n    else:\\n      print(\\\"a == a It's not the same cat!\\\")\\n\")), mdx(\"p\", null, \"You achieve that by checking the special variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__name__\"), \" and compare it\\nto the string \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"__main__\\\"\"), \". Don't forget to indent the code that instantiates\\nand tests the code to match the if statement in your condition.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"34:70\",\n    \"34:70\": true\n  }), \"\"))), mdx(\"p\", null, \"Let's take a look at a module we didn't write: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jira\"), \". Let's install that module first:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: make sure you run the steps in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/learning-python-setting-up-your-development-environment\"\n  }), \"setting up your development environment\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ pipenv run pip install jira\\n\")), mdx(CodeWave, {\n    mdxType: \"CodeWave\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from jira import JIRA\\n\\noptions = {\\\"server\\\": \\\"https://jira.atlassian.com\\\"}\\njira = JIRA(options)\\n\\n# Get all projects viewable by anonymous users.\\nprojects = jira.projects()\\n\\nprint(projects)\\n\\n\")), mdx(\"p\", null, \"Let's analyze the following code line by line:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"1\"\n  }), \"\")), mdx(\"p\", null, \"From the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jira\"), \" module, get the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JIRA\"), \" class definition.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3\"\n  }), \"\")), mdx(\"p\", null, \"Construct a dictionary (a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dict\"), \" object) with key \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"server\"), \"\\nand value \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jira.atlassian.com\"\n  }), \"https://jira.atlassian.com\"), \", and assign the value to\\nthe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"options\"), \" variable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4\"\n  }), \"\")), mdx(\"p\", null, \"With those \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"options\"), \", instantiate a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"jira\"), \" object from the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JIRA\"), \"\\nclass.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7\"\n  }), \"\")), mdx(\"p\", null, \"Invoke the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"projects\"), \" function from my new \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"jira\"), \" object and\\nassign the results to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"projects\"), \" variable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"9\"\n  }), \"\")), mdx(\"p\", null, \"Print the object \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"projects\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[5:9]\",\n    \"1[5:9]\": true\n  }), \"\")), mdx(\"p\", null, \"But... how does python know where to find the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jira\"), \" module. What does it mean\\n\\\"to install it\\\"?\")), mdx(\"p\", null, \"If you compare the jira example from above to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat\"), \" module example. One important\\ndifference is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cat.py\"), \" was located in the same directory as our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.py\"), \" file.\"), mdx(\"p\", null, \"Like most programming languages, Python cares where you place your files, and it follows\\na series of rules to find modules. You can read more about those rules \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.python.org/3/tutorial/modules.html#standard-modules\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"I'll try to simplify what that page says here:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: you can modify this behavior but that's a bit out of scope for this tutorial.\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It looks for built-in functions.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It looks for modules in your current working directory (this is how it found \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cat.py\"), \"!)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It looks at the python installation folder (your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"site-packages\"), \").\")), mdx(\"p\", null, \"i.e. installing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jira\"), \" module means to get the files from some location on the internet\\nand placing them in the right location in your computer.\"), mdx(\"p\", null, \"Now that we know that, the really cool fact is that the JIRA class we're using in our code\\nis not that special. Someone else wrote it, published it in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/\"\n  }), \"pypi.org\"), \"\\nand made it available for everyone.\"), mdx(\"p\", null, \"When we ran:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ pipenv run pip install jira\\n\")), mdx(\"p\", null, \"the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipenv\"), \" just helped us to place all those bits we downloaded in the right place.\"), mdx(\"p\", null, \"You can even learn how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jira\"), \" was implemented (which is just a fancy word to say \\\"coded\\\" or \\\"written\\\")\"), mdx(\"p\", null, \"You can read how the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pycontribs/jira/blob/master/jira/client.py#L240\"\n  }), \"JIRA class\"), \" has\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pycontribs/jira/blob/master/jira/client.py#L345\"\n  }), \"an \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"__init__\"), \" method\"), \". Or the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/pycontribs/jira/blob/master/jira/client.py#L2231\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"projects\"), \"\\nfunction\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"When we build programs sometimes they get big. The same way\nwe split little pieces of logic with  Methods, Functions and Classes \nwe might…","timeToRead":3,"banner":null}},"pageContext":{"slug":"/learning-python-modules","formatString":"DD.MM.YYYY"}}}